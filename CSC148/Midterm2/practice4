from typing import List, Union, Type, Any, Callable

#Recursion


def count_strings_with_length(x: Union[list, str]) -> dict:
    """
    Return a dictionary mapping the length of each word in x to the number of
    times that length appears.

    >>> count_strings_with_length('cat')
    {3: 1}
    >>> count_strings_with_length(['cat', ['a', 'dog'], [[['b'], 'no'], 'yes']])
    {3: 3, 1: 2, 2: 1}
    """
    result = {}
    if isinstance(x, str):
        result[len(x)] = 1
    else:
        for item in x:
            temp = count_strings_with_length(item)
            for key in temp:
                if key in result:
                    result[key] += temp[key]
                else:
                    result[key] = temp[key]
    return result



def return_values_with_type(x: Any, t: Type) -> List[Any]:
    """
    Return all of the values in x that have type t.

    >>> return_values_with_type(1, int)
    [1]
    >>> return_values_with_type(1, str)
    []
    >>> return_values_with_type([1, [[3], 'yes'], 'b', 2], int)
    [1, 3, 2]
    """
    result =[]
    if isinstance(x, t):
        return [x]
    elif isinstance(x, list):
        for item in x:
            result.extend(return_values_with_type(item, t))
        return result
    else:
        return []

def get_max(x: Union[list, int]) -> int:
    """
    Return largest int in x.

    >>> get_max(1)
    1
    >>> get_max([1, [[3], 0], 2])
    3
    """
    result = []
    if isinstance(x, int):
        result += [x]
    else:
        for item in x:
            result += [get_max(item)]
    return max(result)



    # result = []
    # if isinstance(x, int):
    #     return x
    # else:
    #     for item in x:
    #         result.extend([get_max(item)])
    #     return max(result)


def get_min(x: Union[list, int]) -> int:
    """
    Return smallest int in x.

    >>> get_min(1)
    1
    >>> get_min([1, [[3], 0], 2])
    0
    """
    if isinstance(x, int):
        return x
    else:
        result = []
        for item in x:
            result.extend([get_min(item)])
        return min(result)


def all_true(x: Union[list, bool]) -> bool:
    """
    Return True if all booleans in x are True.

    >>> all_true(True)
    True
    >>> all_true([])
    True
    >>> all_true([True, [[False, True], True], [True]])
    False
    """
    result = []
    if isinstance(x, bool):
        return x
    else:
        for item in x:
            result += [all_true(item)]
        return all(result)


    # result = []
    # if x == []:
    #     return True
    # if isinstance(x, bool):
    #     return x
    # else:
    #     for item in x:
    #         result.extend([all_true(item)])
    #     return all(result)


def any_true(x: Union[list, bool]) -> bool:
    """
    Return True if there is at least one boolean in x that is True.

    >>> any_true(True)
    True
    >>> any_true([])
    False
    >>> any_true([True, [[False, True], True], [True]])
    True
    """
    if x == []:
        return False
    if isinstance(x, bool):
        return x
    else:
        result = []
        for item in x:
            result.extend([any_true(item)])
        return any(result)

#Trees
# Practice Problems: Trees
class Tree:
    """
    A class representing a Tree.

    value - The value of the root of this Tree.
    children - The subtrees of this Tree.
    """
    value: Any
    children: List['Tree']

    def __init__(self, value: Any, children: List['Tree'] = None) -> None:
        """
        Initialize this Tree with the value value and children children.
        """
        self.value = value
        self.children = children[:] if children else []


    def get_max_depth(self) -> int:
        """
        Return the maximum depth of this Tree.

        >>> t = Tree(10, [Tree(3),
        ...               Tree(4, [Tree(5),
        ...                        Tree(6, [Tree(7)])]),
        ...               Tree(8, [Tree(1, [Tree(2)])])])
        >>> t.get_max_depth()
        3
        """
        result = []
        if not self.children:
            return 0
        else:
            for child in self.children:
                result += [child.get_max_depth()]
            return max(result) + 1


    def get_values_at_depth(self, depth: int) -> List[Any]:
        """
        Return the values at depth depth in this Tree.

        >>> t = Tree(10, [Tree(3),
        ...               Tree(4, [Tree(5),
        ...                        Tree(6, [Tree(7)])]),
        ...               Tree(8, [Tree(1, [Tree(2)])])])
        >>> t.get_values_at_depth(2)
        [5, 6, 1]
        """
        result = []
        if depth == 0:
            return [self.value]
        else:
            for child in self.children:
                result += child.get_values_at_depth(depth -1)
            return result


        # if depth == 0:
        #     return [self.value]
        # else:
        #     result = []
        #     for child in self.children:
        #         result.extend(child.get_values_at_depth(depth -1))
        #     return result

    def level_sums_using_queue(self) -> List[int]:
        """
        Return a list containing the sum of each level of this Tree.

        >>> t = Tree(10, [Tree(3),
        ...               Tree(4, [Tree(5),
        ...                        Tree(6, [Tree(7)])]),
        ...               Tree(8, [Tree(1, [Tree(2)])])])
        >>> t.level_sums_using_queue()
        [10, 15, 12, 9]
        """
        q = [self, 'End']
        count_sum = 0
        result = []
        while q:
            item = q.pop(0)
            if item == 'End':
                result.append(count_sum)
                count_sum = 0
                if q:
                    q.append('End')
            else:
                count_sum += item.value
                for child in item.children:
                    q.append(child)
        return result




    def get_condition_passers(self, f: Callable) -> List[Any]:
        """
        Return all of the items in self that pass f in pre-order.

        >>> def less_than_7(val):
        ...     return val < 7
        >>> t = Tree(10, [Tree(3),
        ...               Tree(4, [Tree(5),
        ...                        Tree(6, [Tree(7)])]),
        ...               Tree(8, [Tree(1, [Tree(2)])])])
        >>> t.get_condition_passers(less_than_7)
        [3, 4, 5, 6, 1, 2]
        """
        result = []
        if f(self.value):
            result += [self.value]
        for child in self.children:
            result += child.get_condition_passers(f)
        return result

    def get_condition_passers_levelorder(self, f: Callable) -> List[Any]:
        """
        Return all of the items in self that pass f in pre-order.

        >>> def less_than_7(val):
        ...     return val < 7
        >>> t = Tree(10, [Tree(3),
        ...               Tree(4, [Tree(5),
        ...                        Tree(6, [Tree(7)])]),
        ...               Tree(8, [Tree(1, [Tree(2)])])])
        >>> t.get_condition_passers_levelorder(less_than_7)
        [3, 4, 5, 6, 1, 2]
        """
        q = [self]
        result = []
        while q:
            item = q.pop(0)
            if f(item.value):
                result.append(item.value)
            for child in item.children:
                q.append(child)
        return result



        #
        # result = []
        # q = [self]
        # while q:
        #     item = q.pop(0)
        #     if f(item.value):
        #         result.extend([item.value])
        #     for child in item.children:
        #         q.append(child)
        # return result

    # def get_longest_path(self) -> List[Any]:
    #     """
    #     Return the longest path in this Tree from the root to a leaf.
    #
    #     >>> t = Tree(10, [Tree(3),
    #     ...               Tree(4, [Tree(5),
    #     ...                        Tree(6, [Tree(7)])]),
    #     ...               Tree(8, [Tree(1, [Tree(2)])])])
    #     >>> t.get_longest_path()
    #     [10, 4, 6, 7]
    #     """
    #     if self.children == []:
    #         return [self.value]
    #
    #     paths = [child.get_longest_path() for child in self.children]
    #     longest_path = paths[0]
    #     for path in paths:
    #         if len(path) > len(longest_path):
    #             longest_path = path
    #
    #     return [self.value] + longest_path

    def all_values_in_tree(self, values: List[Any]) -> bool:
        """
        Return True iff all values in values are in this Tree.

        >>> t = Tree(10, [Tree(3),
        ...               Tree(4, [Tree(5),
        ...                        Tree(6, [Tree(7)])]),
        ...               Tree(8, [Tree(1, [Tree(2)])])])
        >>> t.all_values_in_tree([3, 1, 4])
        True
        >>> t.all_values_in_tree([3, 9])
        False
        """
        result = []
        if self.value in values:
            values.remove(self.value)
        if values == []:
            return True
        for child in self.children:
            result += [child.all_values_in_tree(values)]
        return any(result)


        # We can take advantage of the fact that lists are mutable -- if we
        # modify values and remove from it whenever we find a value.
        # Alternatively:
        #    Use a helper function that checks whether a value is in self or not
        #    and return True only iff all values in values are found.
        # if self.value in values:
        #     values.remove(self.value)
        # if values == []:
        #     return True
        #
        # result = []
        # for child in self.children:
        #     result += [child.all_values_in_tree(values)]
        # return any(result)

    def count_strings_with_length(self) -> dict:
        """
        Return a dictionary mapping the length of each word in this Tree
        to the number of times that length appears.

        >>> t = Tree('cat', [Tree('a'),
        ...                  Tree('dog', [Tree('b'),
        ...                               Tree('no', [Tree('yes')])])])
        >>> t.count_strings_with_length()
        {3: 3, 1: 2, 2: 1}
        """
        new_dict = {len(self.value) : 1}
        for child in self.children:
            result = child.count_strings_with_length()
            for key in result:
                if key in new_dict:
                    new_dict[key] += result[key]
                else:
                    new_dict[key] = result[key]
        return new_dict

    def return_values_with_type(self, t: Type) -> List[Any]:
        """
        Return all of the values in this Tree that have type t.

        >>> t = Tree(1, [Tree(3),
        ...              Tree('yes', [Tree('b'),
        ...                           Tree(2)])])
        >>> t.return_values_with_type(int)
        [1, 3, 2]
        """
        result = []
        if isinstance(self.value, t):
            result += [self.value]
        for child in self.children:
            result += child.return_values_with_type(t)
        return result


    def get_max(self) -> int:
        """
        Return largest int in this Tree.

        >>> t = Tree(10, [Tree(3),
        ...               Tree(4, [Tree(5),
        ...                        Tree(6, [Tree(7)])]),
        ...               Tree(8, [Tree(1, [Tree(2)])])])
        >>> t.get_max()
        10
        """
        # if self is None:
        #     return 0
        # else:
        result = [self.value]
        for child in self.children:
            result += [child.get_max()]
        return max(result)

        #
        # result = [self.value]
        # for child in self.children:
        #     result.extend([child.get_max()])
        # return max(result)

    def get_min(self) -> int:
        """
        Return smallest int in this Tree.

        >>> t = Tree(10, [Tree(3),
        ...               Tree(4, [Tree(5),
        ...                        Tree(6, [Tree(7)])]),
        ...               Tree(8, [Tree(1, [Tree(2)])])])
        >>> t.get_min()
        1
        """
        result = [self.value]
        for child in self.children:
            result.extend([child.get_min()])
        return min(result)

    def all_true(self) -> bool:
        """
        Return True if all booleans in this Tree are True.

        >>> t = Tree(True, [Tree(True),
        ...                 Tree(True, [Tree(True),
        ...                             Tree(False, [Tree(True)])]),
        ...                 Tree(True, [Tree(False, [Tree(True)])])])
        >>> t.all_true()
        False
        """
        result = [self.value]
        for child in self.children:
            result.extend([child.all_true()])
        return all(result)

    def any_true(self) -> bool:
        """
        Return True if any booleans in this Tree are True.

        >>> t = Tree(True, [Tree(True),
        ...                 Tree(True, [Tree(True),
        ...                             Tree(False, [Tree(True)])]),
        ...                 Tree(True, [Tree(False, [Tree(True)])])])
        >>> t.any_true()
        True
        """
        result = [self.value]
        for child in self.children:
            result.extend([child.all_true()])
        return any(result)

#BinaryTree
class BinaryTree:
    """
    A class representing a BinaryTree.

    value - The value of the root of this BinaryTree.
    left - The left subtree of this BinaryTree.
    right - The right subtree of this BinaryTree.
    """
    value: Any
    left: Union['BinaryTree', None]
    right: Union['BinaryTree', None]

    def __init__(self, value: Any, left: Union['BinaryTree', None] = None,
                 right: Union['BinaryTree', None] = None) -> None:
        """
        Initialize this BinaryTree with the value value, left subtree left,
        and right subtree right.
        """
        self.value = value
        self.left = left
        self.right = right


def bt_get_max_depth(t: Union['BinaryTree', None]) -> int:
    """
    Return the maximum depth of this BinaryTree.

    >>> t = BinaryTree(10, BinaryTree(3, BinaryTree(8, BinaryTree(1),
    ...                                                BinaryTree(2))),
    ...                    BinaryTree(4, BinaryTree(5),
    ...                                  BinaryTree(6, BinaryTree(7))))
    >>> bt_get_max_depth(t)
    3
    """
    if t is None:
        return -1
    return max([bt_get_max_depth(t.left), bt_get_max_depth(t.right)]) + 1


    # if t is None:
    #     return -1
    # else:
    #     return 1 + max(bt_get_max_depth(t.left), bt_get_max_depth(t.right))


def bt_get_min(t: Union['BinaryTree', None]) -> int:
    """
    Return smallest int in this BinaryTree.
    If t is an empty BinaryTree, return -1.

    Pre-condition: All ints in t > -1

    >>> t = BinaryTree(10, BinaryTree(3, BinaryTree(8, BinaryTree(1),
    ...                                                BinaryTree(2))),
    ...                    BinaryTree(4, BinaryTree(5),
    ...                                  BinaryTree(6, BinaryTree(7))))
    >>> bt_get_min(t)
    1
    """
    if t is None:
        return -1

    left_min = bt_get_min(t.left)
    right_min = bt_get_min(t.right)

    if left_min == -1:
        left_min = t.value
    if right_min == -1:
        right_min = t.value

    return min([t.value,left_min, right_min])


def bt_get_max(t: Union['BinaryTree', None]) -> int:
    """
    Return largest int in this BinaryTree.
    If t is an empty BinaryTree, return -1.

    Pre-condition: All ints in t > -1

    >>> t = BinaryTree(10, BinaryTree(3, BinaryTree(8, BinaryTree(1),
    ...                                                BinaryTree(2))),
    ...                    BinaryTree(4, BinaryTree(5),
    ...                                  BinaryTree(6, BinaryTree(7))))
    >>> bt_get_max(t)
    10
    """
    if t is None:
        return 0
    else:
        return max(t.value, bt_get_max(t.left), bt_get_max(t.right))


def bt_all_true(t: Union['BinaryTree', None]) -> bool:
    """
    Return True if all booleans in this BinaryTree are True.

    >>> t = BinaryTree(True, BinaryTree(True, BinaryTree(True, BinaryTree(True),
    ...                                                  BinaryTree(True))),
    ...                      BinaryTree(False, BinaryTree(True),
    ...                                 BinaryTree(True, BinaryTree(True))))
    >>> bt_all_true(t)
    False
    """
    if t is None:
        return True
    # if t.value == False:
    #     return False
    return all([t.value, bt_all_true(t.left), bt_all_true(t.right)])


def bt_any_true(t: Union['BinaryTree', None]) -> bool:
    """
    Return True if any booleans in this BinaryTree are True.

    >>> t = BinaryTree(True, BinaryTree(True, BinaryTree(True, BinaryTree(True),
    ...                                                  BinaryTree(True))),
    ...                      BinaryTree(False, BinaryTree(True),
    ...                                 BinaryTree(True, BinaryTree(True))))
    >>> bt_any_true(t)
    True
    >>> tt2 = BinaryTree(False, BinaryTree(False), BinaryTree(False))
    >>> bt_any_true(tt2)
    False
    """
    if t is None:
        return False
    # if t.value == True:
    #     return True
    return any([t.value, bt_all_true(t.left), bt_all_true(t.right)])


def is_partitioned(t: Union['BinaryTree', None]) -> bool:
    """
    Return True if all values in t.left are less than all values in t.right
    and all of the subtrees in t are also partitioned.

    >>> t = BinaryTree(10, BinaryTree(3, BinaryTree(8, BinaryTree(1),
    ...                                                BinaryTree(2))),
    ...                    BinaryTree(4, BinaryTree(5),
    ...                                  BinaryTree(6, BinaryTree(7))))
    >>> is_partitioned(t)
    False
    >>> tt2 = BinaryTree(3, BinaryTree(4), BinaryTree(5))
    >>> is_partitioned(tt2)
    False
    """
    if t is None:
        return True
    if bt_get_max(t.left) > bt_get_min(t.right):
        return False
    else:
        return is_partitioned(t.left) and is_partitioned(t.right)



    # if t is None:
    #     return True
    # if bt_get_max(t.left) > bt_get_min(t.right):
    #     return False
    # return is_partitioned(t.left) and is_partitioned(t.right)


def bt_get_values_at_depth(t: Union['BinaryTree', None],
                           depth: int) -> List[Any]:
    """
    Return the values at depth depth in this BinaryTree.

    >>> t = BinaryTree(10, BinaryTree(3, BinaryTree(8, BinaryTree(1),
    ...                                                BinaryTree(2))),
    ...                    BinaryTree(4, BinaryTree(5),
    ...                                  BinaryTree(6, BinaryTree(7))))
    >>> bt_get_values_at_depth(t, 2)
    [8, 5, 6]
    """
    if t is None:
        return []
    if depth == 0:
        return [t.value]
    else:
        return bt_get_values_at_depth(t.left, depth - 1)+ bt_get_values_at_depth(t.right, depth - 1)


    # if t is None:
    #     return []
    # if depth == 0:
    #     return [t.value]
    # return bt_get_values_at_depth(t.left, depth -1) + bt_get_values_at_depth(t.right, depth -1)


def bt_level_sums_using_depth(t: Union['BinaryTree', None]) -> List[int]:
    """
    Return a list containing the sum of each level of this BinaryTree.

    >>> t = BinaryTree(10, BinaryTree(3, BinaryTree(8, BinaryTree(1),
    ...                                                BinaryTree(2))),
    ...                    BinaryTree(4, BinaryTree(5),
    ...                                  BinaryTree(6, BinaryTree(7))))
    >>> bt_level_sums_using_depth(t)
    [10, 7, 19, 10]
    """
    max_depth = bt_get_max_depth(t)
    result = []
    for i in range(max_depth + 1):
        result.append(sum(bt_get_values_at_depth(t, i)))
    return result


def bt_get_condition_passers(t: Union['BinaryTree', None],
                             f: Callable) -> List[Any]:
    """
    Return all of the items in t that pass f in pre-order.

    >>> def less_than_7(val):
    ...     return val < 7

    >>> t = BinaryTree(10, BinaryTree(3, BinaryTree(8, BinaryTree(1),
    ...                                                BinaryTree(2))),
    ...                    BinaryTree(4, BinaryTree(5),
    ...                                  BinaryTree(6, BinaryTree(7))))
    >>> bt_get_condition_passers(t, less_than_7)
    [3, 1, 2, 4, 5, 6]
    """
    result = []
    if t is None:
        return []
    if f(t.value):
        result = [t.value]
    return result + bt_get_condition_passers(t.left, f) + bt_get_condition_passers(t.right, f)


    # result = []
    # if t is None:
    #     return []
    # if f(t.value):
    #     result.extend([t.value])
    # return result + bt_get_condition_passers(t.left, f) + bt_get_condition_passers(t.right, f)


def bt_get_condition_passers_postorder(t: Union['BinaryTree', None],
                                       f: Callable) -> List[Any]:
    """
    Return all of the items in t that pass f in post-order.

    >>> def less_than_7(val):
    ...     return val < 7
    >>> t = BinaryTree(10, BinaryTree(3, BinaryTree(8, BinaryTree(1),
    ...                                                BinaryTree(2))),
    ...                    BinaryTree(4, BinaryTree(5),
    ...                                  BinaryTree(6, BinaryTree(7))))
    >>> bt_get_condition_passers_postorder(t, less_than_7)
    [1, 2, 3, 5, 6, 4]
    """
    result = []
    if t is None:
        return []
    if f(t.value):
        result.extend([t.value])
    return bt_get_condition_passers_postorder(t.left, f) + bt_get_condition_passers_postorder(t.right, f) + result


def bt_get_condition_passers_inorder(t: Union['BinaryTree', None],
                                     f: Callable) -> List[Any]:
    """
    Return all of the items in t that pass f in in-order.

    >>> def less_than_7(val):
    ...     return val < 7
    >>> t = BinaryTree(10, BinaryTree(3, BinaryTree(8, BinaryTree(1),
    ...                                                BinaryTree(2))),
    ...                    BinaryTree(4, BinaryTree(5),
    ...                                  BinaryTree(6, BinaryTree(7))))
    >>> bt_get_condition_passers_inorder(t, less_than_7)
    [1, 2, 3, 5, 4, 6]
    """
    result = []
    if t is None:
        return []
    if f(t.value):
        result.extend([t.value])
    return bt_get_condition_passers_inorder(t.left, f) + result + bt_get_condition_passers_inorder(t.right, f)


def bt_get_condition_passers_levelorder(t: Union['BinaryTree', None],#######
                                        f: Callable) -> List[Any]:
    """
    Return all of the items in t that pass f in pre-order.

    >>> def less_than_7(val):
    ...     return val < 7
    >>> t = BinaryTree(10, BinaryTree(3, BinaryTree(8, BinaryTree(1),
    ...                                                BinaryTree(2))),
    ...                    BinaryTree(4, BinaryTree(5),
    ...                                  BinaryTree(6, BinaryTree(7))))
    >>> bt_get_condition_passers_levelorder(t, less_than_7)
    [3, 4, 5, 6, 1, 2]
    """
    q = [t]
    result = []
    while q:
        item = q.pop(0)
        if item:
            if f(item.value):
                result += [item.value]

            q.append(item.left)
            q.append(item.right)
    return result



def bt_get_longest_path(t: Union['BinaryTree', None]) -> List[Any]:########
    """
    Return the longest path in this BinaryTree from the root to a leaf.

    >>> t = BinaryTree(10, BinaryTree(3, BinaryTree(8, BinaryTree(1),
    ...                                                BinaryTree(2))),
    ...                    BinaryTree(4, BinaryTree(5),
    ...                                  BinaryTree(6, BinaryTree(7))))
    >>> bt_get_longest_path(t)
    [10, 3, 8, 1]
    """
    if t is None:
        return []
    right_path = bt_get_longest_path(t.right)
    left_path = bt_get_longest_path(t.left)
    if len(right_path) > len(left_path):
        return [t.value] + right_path
    else:
        return [t.value] + left_path

def bt_all_values_in_tree(t: Union['BinaryTree', None],
                          values: List[Any]) -> bool:
    """
    Return True iff all values in values are in this BinaryTree.

    >>> t = BinaryTree(10, BinaryTree(3, BinaryTree(8, BinaryTree(1),
    ...                                                BinaryTree(2))),
    ...                    BinaryTree(4, BinaryTree(5),
    ...                                  BinaryTree(6, BinaryTree(7))))
    >>> bt_all_values_in_tree(t, [3, 1, 4])
    True
    >>> bt_all_values_in_tree(t, [3, 9])
    False
    """
    if t is None:
        return values == []
    if t.value in values:
        values.remove(t.value)
    if values == []:
        return True
    return any([bt_all_values_in_tree(t.left, values), bt_all_values_in_tree(t.right, values)])




    # if t is None:
    #     return values == []
    #
    # if t.value in values:
    #     values.remove(t.value)
    #
    # if values == []:
    #     return True
    #
    # return bt_all_values_in_tree(t.left, values) or bt_all_values_in_tree(t.right, values)

def bt_count_strings_with_length(t: Union['BinaryTree', None]) -> dict:
    """
    Return a dictionary mapping the length of each word in this BinaryTree
    to the number of times that length appears.

    >>> t = BinaryTree('cat', BinaryTree('a', BinaryTree('dog', BinaryTree('b'),
    ...                                                  BinaryTree('no'))),
    ...                       BinaryTree('yes'))
    >>> bt_count_strings_with_length(t)
    {3: 3, 1: 2, 2: 1}
    """

    if t is None:
        return {}
    new_dict = {len(t.value):1}
    for item in [t.left, t.right]:
        result = bt_count_strings_with_length(item)
        for key in result:
            if key in new_dict:
                new_dict[key] += result[key]
            else:
                new_dict[key] = result[key]
    return new_dict


def bt_return_values_with_type(t: Union['BinaryTree', None],
                               type_: Type) -> List[Any]:
    """
    Return all of the values in this BinaryTree that have type t.

    >>> t = BinaryTree(1, BinaryTree(3),
    ...                   BinaryTree('yes', BinaryTree('b'),
    ...                                     BinaryTree(2)))
    >>> bt_return_values_with_type(t, int)
    [1, 3, 2]
    """
    result = []
    if t is None:
        return []
    if isinstance(t.value, type_):
        result += [t.value]
    else:
        result = []
    return result + bt_return_values_with_type(t.left, type_) + bt_return_values_with_type(t.right, type_)




if __name__ == '__main__':
    import doctest
    doctest.testmod()
    print('dd')
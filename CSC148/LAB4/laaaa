from typing import Union, Any


class LinkedListNode:
    """
    A Node to be used in a LinkedList.

    next_ - The successor to this LinkedListNode
    value - The data represented by this LinkedListNode.
    """
    next_: Union["LinkedListNode", None]
    value: object

    def __init__(self, value: object,
                 next: Union["LinkedListNode", None] = None) -> None:
        """
        Initialize this LinkedListNode with the value value and successor next.

        >>> LinkedListNode(3).value
        3
        >>> LinkedListNode(3).next_ == None
        True
        """
        self.value = value
        self.next_ = next

    def __str__(self) -> str:
        """
        Return a string representation of this LinkedListNode.

        >>> print(LinkedListNode(3))
        3 ->
        """
        return "{} -> ".format(self.value)


class LinkedList:
    """
    Collection of LinkedListNodes.

    front - first node of this LinkedList
    back - last node of this LinkedList
    size - the number of nodes in this LinkedList (>= 0)
    """
    front: Union[LinkedListNode, None]
    back: Union[LinkedListNode, None]
    size: int

    def __init__(self) -> None:
        """
        Initialize an empty LinkedList.

        >>> lnk = LinkedList()
        >>> lnk.size
        0
        """
        self.front = None
        self.back = None
        self.size = 0

    def prepend(self, value: Any) -> None:
        """
        Insert value to the start of this LinkedList (before self.front).

        >>> lnk = LinkedList()
        >>> lnk.prepend(0)
        >>> lnk.prepend(1)
        >>> print(lnk)
        1 -> 0 -> |
        """
        self.front = LinkedListNode(value, self.front)
        if self.back is None:
            self.back = self.front
        self.size += 1

    def __str__(self) -> str:
        """
        Return a string representation of this LinkedList.

        >>> lnk = LinkedList()
        >>> lnk.prepend(0)
        >>> lnk.prepend(1)
        >>> print(lnk)
        1 -> 0 -> |
        """
        cur_node = self.front
        result = ''
        while cur_node is not None:
            result += str(cur_node)
            cur_node = cur_node.next_
        return result + '|'

    def add_before(self, new_value: Any, to_find: Any):
        """
        Add new_value to this LinkedList so it comes immediately
        before to_find.

        If to_find isn't in this LinkedList, don't modify this LinkedList.

        >>> lnk = LinkedList()
        >>> lnk.prepend("H")
        >>> lnk.add_before("A", "H")
        >>> print(lnk)
        A -> H -> |
        >>> lnk.size
        2
        >>> lnk.add_before("C", "H")
        >>> print(lnk)
        A -> C -> H -> |
        >>> lnk.size
        3
        >>> lnk.add_before("O", "B")
        >>> print(lnk)
        A -> C -> H -> |
        >>> lnk.size
        3
        """
        current_node = self.front
        prev_node = None
        new_node = LinkedListNode(new_value)

        while current_node is not None and current_node.value != to_find:
            prev_node = current_node
            current_node = current_node.next_

        if current_node == None:
            return

        if prev_node is None:
            self.front = new_node
            new_node.next_ = current_node
        else:
            prev_node.next_ = new_node
            new_node.next_ = current_node


        self.size += 1

if __name__ == "__main__":
    import doctest
    doctest.testmod()


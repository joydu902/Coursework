from typing import Union, List

def get_all_elements(x: Union[list, int]) -> List[int]:
    results = []
    if isinstance(x, int):
        results.append(x)
    else:
        for item in x:
            results.extend(get_all_elements(item))
    return results

def f(x):
    return x > 15

def passes_condition(f, x: Union[list, int]) -> List[int]:
    results = []
    if isinstance(x, int):
        if f(x):
            return [x]
        else:
            return []
    else:
        for item in x:
            results += passes_condition(f, item)
        return results

def count_number_of_lists(x: Union[list, int]) -> int:
    result = []
    if isinstance(x, int):
        return 0
    else:
        for item in x:
            result += [count_number_of_lists(item)]
        return sum(result) + 1

def all_sections_are_words(word, word_list) -> bool:

    if not word in word_list:
        return False

    if len(word) <= 3:
        return word in word_list

    return (all_sections_are_words(word[:len(word)//2], word_list)) and (all_sections_are_words(word[len(word)//2:],word_list))


def get_nth_fibonacci(n:int) -> int:
    result = 0
    if n < 3:
        return 1
    for i in range(n):
        result = get_nth_fibonacci(i) + get_nth_fibonacci(i-1)
    return result

def x_in_list(x, lst) -> bool:
    if len(lst) == 1:
        return lst[0] == x
    if lst == []:
        return False
    return x_in_list(x, lst[:len(lst)//2]) or x_in_list(x, lst[len(lst)//2:])

def x_in_sorted_list(x, lst) -> bool:
    if len(lst) == 1:
        return lst[0] == x
    if lst == []:
        return False
    mid_index = len(lst) // 2
    if x < lst[mid_index]:
        return x in lst[:mid_index]
    return x in lst[mid_index:]
    # return x_in_sorted_list(x, lst[:len(lst)//2]) or x_in_sorted_list(x, lst[len(lst)//2:])

def binary_search(x, lst) -> int:
    if len(lst) == 1:
        if lst[0] == x:
            return 0
        else:
            return -1
    if lst == []:
        return -1

    mid_index = len(lst) // 2
    if x < lst[mid_index]:
        return binary_search(x, lst[:mid_index])
    else:
        right = binary_search(x, lst[mid_index:])
        if right > -1:
            return mid_index + right
        else:
            return -1


def get_nth_fibonacci_memoized(n: int, fibonaccis: dict = {}) -> int:
    if n < 3:
        return 1
    if n in fibonaccis:
        return fibonaccis[n]

    new_fibo = get_nth_fibonacci_memoized(n-1, fibonaccis) + get_nth_fibonacci_memoized(n-2, fibonaccis)
    fibonaccis[n] = new_fibo
    return new_fibo












if __name__ == '__main__':
    assert get_all_elements(5) == [5]
    assert get_all_elements([5, 15]) == [5, 15]
    assert get_all_elements([5, 15, [[25, 30], 45]]) == [5, 15, 25, 30, 45]
    assert get_all_elements([[5], 3, [1, [2], [3]]]) == [5, 3, 1, 2, 3]
    assert get_all_elements([[1, 2], [3, [4], [[5]]], [6, [7, [8, 9]], 10]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

    assert passes_condition(f, 5) == []
    assert passes_condition(f, 25) == [25]
    assert passes_condition(f, [15, 25, 30]) == [25, 30]
    assert passes_condition(f, [[100, 3], [[15, 25, 30]], 45]) == [100, 25, 30, 45]
    assert passes_condition(f, [100, [[25, 3], 150, 10], [[30, [15, 20]], 5]]) == [100, 25, 150, 30, 20]

    assert count_number_of_lists(5) == 0
    assert count_number_of_lists([5]) == 1
    assert count_number_of_lists([[5], [3], [1]]) == 4
    assert count_number_of_lists([[5], 3, [1, [2], [3]]]) == 5

    assert all_sections_are_words("today", ['to', 'today']) == False
    assert all_sections_are_words("today", ['to', 'day', 'today']) == True
    assert all_sections_are_words("sometome", ['so', 'me', 'to']) == False
    assert all_sections_are_words("sometome", ['so', 'me', 'to', 'some']) == False
    assert all_sections_are_words("sometome", ['so', 'me', 'to', 'some', 'tome']) == False
    assert all_sections_are_words("sometome", ['so', 'me', 'to', 'some', 'tome', 'sometome']) == True
    assert all_sections_are_words("sometome", ['so', 'me', 'some', 'tome', 'sometome']) == False
    assert all_sections_are_words("sometome", ['so', 'me', 'to', 'tome', 'sometome']) == False

    assert get_nth_fibonacci(1) == 1
    assert get_nth_fibonacci(2) == 1
    assert get_nth_fibonacci(3) == 2
    assert get_nth_fibonacci(10) == 55
    assert get_nth_fibonacci(15) == 610

    assert x_in_list(2, [-1, 0, 1]) == False
    assert x_in_list(1, [-5, 3, 1]) == True
    assert x_in_list(10, [1, -2, 10, -1, 15, 20]) == True
    assert x_in_list(15, [-1, 0, -4, 15, 3, 1]) == True
    assert x_in_list(20, [-1, 0, -4, 15, 3, 1]) == False

    assert x_in_sorted_list(2, [-1, 0, 1]) == False
    assert x_in_sorted_list(1, [-5, 0, 1]) == True
    assert x_in_sorted_list(10, [1, 10, 11, 15, 20]) == True
    assert x_in_sorted_list(15, [1, 2, 4, 10, 15, 18]) == True
    assert x_in_sorted_list(20, [1, 5, 7, 8, 10, 20]) == True
    assert x_in_sorted_list(25, [1, 5, 7, 8, 10, 20]) == False

    assert binary_search(2, [-1, 0, 1]) == -1
    assert binary_search(1, [-5, 0, 1]) == 2
    assert binary_search(10, [1, 10, 11, 15, 20]) == 1
    assert binary_search(15, [1, 2, 4, 10, 15, 18]) == 4
    assert binary_search(20, [1, 5, 7, 8, 10, 20]) == 5
    assert binary_search(25, [1, 5, 7, 8, 10, 20]) == -1

    assert get_nth_fibonacci_memoized(1) == 1
    assert get_nth_fibonacci_memoized(2) == 1
    assert get_nth_fibonacci_memoized(3) == 2
    assert get_nth_fibonacci_memoized(10) == 55
    assert get_nth_fibonacci_memoized(50) == 12586269025
    assert get_nth_fibonacci_memoized(100) == 354224848179261915075
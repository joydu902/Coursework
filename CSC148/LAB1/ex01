class Course:
    def __init__(self, course: str) -> None:
        self.course = course
        self.capacity = 0
        self.student_list = []
        self.waitlist = []
        self.ss = self.student_list.sort()

    def set_course_capacity(self, limit:int) -> None:
        self.capacity = limit

    def add_student(self, name) -> None:
        if len(self.student_list) >= self.capacity:
            self.waitlist.append(name)
        else:
            self.student_list.append(name)

    def get_enrolled_students(self):
        sss = self.student_list.copy()
        sss.sort()
        return sss

    def get_waitlist(self):
        return self.waitlist

    def remove_student(self,name):
        if name in self.student_list:
            self.student_list.remove(name)
            self.add_student(self.waitlist[0])
            self.waitlist.pop(0)
        elif name in self.waitlist:
            self.waitlist.remove(name)

    def __str__(self):
        return("The course {} has {} student(s) enrolled with {} student(s) on the waitlist.".format(self.course, len(self.student_list), len(self.waitlist)))

    def __eq__(self, other):

        return self.course == other.course and self.waitlist == other.waitlist and self.ss == other.ss and self.capacity == other.capacity









if __name__ == '__main__':
    c = Course("CSC148")
    c.set_course_capacity(2)  # You may assume this number will always be a
    # positive integer and that set_course_capacity()
    # will be called before adding students and
    # never after adding students.

    c.add_student("Sophia")
    c.add_student("Danny")
    c.add_student("Jacqueline")
    print(c)
    assert str(c) == ("The course CSC148 has 2 student(s) enrolled with" +
                      " 1 student(s) on the waitlist.")

    # get_enrolled_students() should return the enrolled students in sorted
    # order.
    assert c.get_enrolled_students() == ['Danny', 'Sophia']

    # get_waitlist() should return the students on the waitlist in the order
    # that they were added.
    assert c.get_waitlist() == ['Jacqueline']

    c.add_student("David")
    assert c.get_waitlist() == ['Jacqueline', 'David']

    # if remove_student() removes an enrolled student, add in the first
    # waitlisted student to enrolled students.
    # HINT: The list method .pop() might be useful here.
    #       See help(list.pop) for details.
    c.remove_student("Danny")
    assert c.get_enrolled_students() == ['Jacqueline', 'Sophia']
    print(c.get_waitlist())
    assert c.get_waitlist() == ['David']

    c.remove_student("David")
    assert c.get_waitlist() == []

    # When comparing 2 courses, they are the same if the enrolled students
    # are the same (regardless of order), the waitlist is the same
    # (and in the same order), and the course code and capacity are the same.
    c2 = Course("CSC148")
    c2.set_course_capacity(2)
    c2.add_student("Jacqueline")
    c2.add_student("Sophia")
    assert c == c2

    c2.add_student("David")
    assert c != c2

    # Below is how python_ta (PythonTA/pyTA/etc.) is called.
    # When run, your code should produce no errors from python_ta.
    # You must have python_ta installed for this to work (see Lab 1 and
    # the Software Installation page).
